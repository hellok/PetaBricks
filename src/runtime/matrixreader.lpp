/*****************************************************************************
 *  Copyright (C) 2008-2011 Massachusetts Institute of Technology            *
 *                                                                           *
 *  Permission is hereby granted, free of charge, to any person obtaining    *
 *  a copy of this software and associated documentation files (the          *
 *  "Software"), to deal in the Software without restriction, including      *
 *  without limitation the rights to use, copy, modify, merge, publish,      *
 *  distribute, sublicense, and/or sell copies of the Software, and to       *
 *  permit persons to whom the Software is furnished to do so, subject       *
 *  to the following conditions:                                             *
 *                                                                           *
 *  The above copyright notice and this permission notice shall be included  *
 *  in all copies or substantial portions of the Software.                   *
 *                                                                           *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY                *
 *  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE               *
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND      *
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE   *
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION   *
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION    *
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE           *
 *                                                                           *
 *  This source code is part of the PetaBricks project:                      *
 *    http://projects.csail.mit.edu/petabricks/                              *
 *                                                                           *
 *****************************************************************************/
%option caseless
%option nostdinit
%option noyywrap
%option nounput
%option prefix="matrixreader"
%option outfile="lex.yy.c"

%{

#include "matrixio.h"

#include "common/jassert.h"
#include "common/jconvert.h"

#ifdef HAVE_CONFIG_H
#  include "config.h"
#endif

#include <stdio.h>

using namespace petabricks;

#define YY_DECL int matrixreaderlex(MatrixReaderScratch& o)

YY_DECL;

%}

%x DATA
%x SIZE

%%

<INITIAL>{
  [ \r\t]+              //nothing
  [\n]                  //nothing
  "size"                {
    o.dimensions=0;
    BEGIN(SIZE);
  }
}

<SIZE>{
  [ \r\tx]+              //nothing
  [0-9]+                {
    JASSERT(o.dimensions+1 < MAX_DIMENSIONS)(o.dimensions)
      .Text("Input matrix has too many dimensions, increase MAX_DIMENSIONS in config.h");
    o.sizes[o.dimensions++] = jalib::StringToX<int>(yytext);
  }
  [\n]                  {
    int n=1;
    for(int i=0; i<o.dimensions; ++i) n*=o.sizes[i];
    o.storage=new petabricks::MatrixStorage(n);
    o.buf = o.storage->data();
    o.remaining = n;
    BEGIN(DATA);
  }
}

<DATA>{
  [ \r\t]+              //nothing
  [\n]                  //nothing
  [-]?[0-9]+[.]?[0-9]*[e]?[+-]?[0-9]* {
    JASSERT(o.remaining>0).Text("Buffer underflow while reading input matrix");
    *o.buf++ = jalib::StringToX<MATRIX_ELEMENT_T>(yytext);
    if(--o.remaining == 0){
      BEGIN(INITIAL);
      return 0;
    }
  }
}

<*>{
  . JASSERT(false)(yytext).Text("Unhandled input");
}

%%



