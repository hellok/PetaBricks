/*****************************************************************************
 *  Copyright (C) 2008-2011 Massachusetts Institute of Technology            *
 *                                                                           *
 *  Permission is hereby granted, free of charge, to any person obtaining    *
 *  a copy of this software and associated documentation files (the          *
 *  "Software"), to deal in the Software without restriction, including      *
 *  without limitation the rights to use, copy, modify, merge, publish,      *
 *  distribute, sublicense, and/or sell copies of the Software, and to       *
 *  permit persons to whom the Software is furnished to do so, subject       *
 *  to the following conditions:                                             *
 *                                                                           *
 *  The above copyright notice and this permission notice shall be included  *
 *  in all copies or substantial portions of the Software.                   *
 *                                                                           *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY                *
 *  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE               *
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND      *
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE   *
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION   *
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION    *
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE           *
 *                                                                           *
 *  This source code is part of the PetaBricks project:                      *
 *    http://projects.csail.mit.edu/petabricks/                              *
 *                                                                           *
 *****************************************************************************/
%{

#include "formula.h"
#include "matrixdef.h"
#include "pbc.h"
#include "region.h"
#include "transform.h"
#include "userrule.h"

#include "common/jconvert.h"
#include "common/srcpos.h"

#include <stdio.h>
#include <map>

#include "libpbcompiler_a-pbparser.h"

#ifdef HAVE_CONFIG_H
#  include "config.h"
#endif

using namespace petabricks;

extern char* pbtext;//in pblexer.cpp

int yyerror(petabricks::TransformListPtr&, const char* msg){
  JASSERT(false)(yylloc)(pbtext)(msg).Text("parse error"); 
  return 0;
}

// keep a ref to all created objects so they aren't deleted during parsing
// the ref pool is then cleared after each parse finishes
// this is needed because bison parsing types doesn't support constructors/destructors
static jalib::JRefPool theRefPool;
static void clearParserCaches(){
  theRefPool.clear();
}
void pbparser_addRefPoolItem(jalib::JRefCounted* i){
  theRefPool.add(i);
}
#define REFALLOC(args...) TAGPOS(theRefPool.add(new args), yylloc)

//helper to mark objects with locations
#define P(A) TAGPOS(A, yylloc)


#define YYLEX_PARAM &yylval, &yylloc
extern int pblex(YYSTYPE * yylval_param,YYLTYPE * yylloc_param);
%}

%defines
%locations
%error-verbose
%expect 0
%name-prefix="pb"

%union {
  int i;
  double d;
  const char* str;
  petabricks::Transform*       transform;
  petabricks::TransformList*   transforms;
  petabricks::MatrixDef*       matrixdef;
  petabricks::MatrixDefList*   matrixdefs;
  petabricks::UserRule*        rule;
  petabricks::RuleList*        rules;
  petabricks::Formula*         formula;
  petabricks::FormulaList*     formulas;
  petabricks::Region*          region;
  petabricks::RegionList*      regions;
  petabricks::OrderedFreeVars* freevars;
  petabricks::TemplateArg*     templatearg;
  petabricks::TemplateArgList* templateargs;
  petabricks::DoubleList*      doublelist;
  petabricks::ConfigItem*      configitem;
  struct { const char* str; petabricks::FormulaList* formulas; } str_formulas; 
}

%start Start

%parse-param { petabricks::TransformListPtr& ret };
%initial-action {
  theRefPool.clear();
}

%token KW_TRANSFORM KW_FROM KW_TO KW_THROUGH KW_LE KW_GE KW_EQ KW_WHERE KW_AND KW_OR
%token KW_PRIMARY KW_SECONDARY KW_PRIORITY
%token KW_ROTATABLE KW_MAIN KW_RECURSIVE KW_DUPLICATE KW_MEMOIZED
%token /*KW_TESTCASE*/ KW_GENERATOR KW_TEMPLATE KW_TUNABLE KW_CONFIG KW_PARAM
%token KW_ACCURACYMETRIC KW_ACCURACYBINS KW_ACCURACYVARIABLE KW_RULE
%token <str> TOK_INTEGER TOK_FLOAT TOK_RULEBODY IDENT 
%type <str> RuleBody
%type <i> Integer PriorityFlag ConfigItemType
%type <d> Float FloatOrInt
%type <transform> Transform TransformHeader 
%type <transforms> TransformList
%type <rules> TransformBody RuleList
%type <rule> Rule RuleHeader BaseRuleHeader
%type <matrixdefs> MatrixDefList RuleHeaderThrough
%type <matrixdef>  MatrixDef
%type <formulas>   OptFormulaList FormulaList OptSize OptVersion OptWhere FormulaRelations
%type <formula>    Formula FormulaExpr FormulaRelation
%type <region>     Region NamedRegion
%type <regions>    NamedRegionList RuleHeaderFrom RuleHeaderTo
%type <templatearg> TemplateArg
%type <templateargs> TemplateArgs
%type <str_formulas> RegionAccessor
%type <freevars>     FreeVars
%type <doublelist>   FloatList 
%type <configitem>   ConfigItem ConfigItemLine

%nonassoc '=' '<' '>' KW_LE KW_GE KW_EQ
%left '-' '+'
%left '*' '/'
%left '^'

%%

Start: TransformList {
  ret = $1;
  clearParserCaches();
};

Transform: TransformHeader TransformBody {
  ($$=$1)->setRules(*$2); 
};

Transform: TransformHeader ';' {
  //forward decl syntax 
};

TransformHeader: Nil {$$=REFALLOC(Transform());};
//TransformHeader: TransformHeader ';'                                { P($$=$1); };
TransformHeader: TransformHeader KW_MAIN                              { P($$=$1)->markMain(); };
TransformHeader: TransformHeader KW_MEMOIZED                          { P($$=$1)->markMemoized();  };
TransformHeader: TransformHeader KW_TRANSFORM IDENT                   { P($$=$1)->setName($3);     };
TransformHeader: TransformHeader KW_PARAM FreeVars                    { P($$=$1)->addParams(*$3);  };
TransformHeader: TransformHeader KW_FROM    MatrixDefList             { P($$=$1)->addFrom(*$3);    };
TransformHeader: TransformHeader KW_THROUGH MatrixDefList             { P($$=$1)->addThrough(*$3); };
TransformHeader: TransformHeader KW_TO      MatrixDefList             { P($$=$1)->addTo(*$3);      };
TransformHeader: TransformHeader KW_TEMPLATE OptLT TemplateArgs OptGT { P($$=$1)->addTemplateArg(*$4); };
//TransformHeader: TransformHeader KW_TESTCASE TestCase               { P($$=$1)->addTestCase($3);};
TransformHeader: TransformHeader KW_ACCURACYMETRIC IDENT              { P($$=$1)->setAccuracyMetric($3);};
TransformHeader: TransformHeader KW_ACCURACYBINS FloatList            { P($$=$1)->setAccuracyBins(*$3);};
TransformHeader: TransformHeader KW_GENERATOR IDENT                   { P($$=$1)->setGenerator($3);};
TransformHeader: TransformHeader ConfigItemLine                       { P($$=$1)->addConfigItem(*$2); };

ConfigItemLine: ConfigItemType ConfigItem {
  P($$=$2);
  $$->addFlag($1);
  $$->initDefaults();
};

ConfigItem: IDENT
  { $$=REFALLOC(ConfigItem(0, $1, jalib::TunableValue(), jalib::TunableValue(), jalib::TunableValue())); };
ConfigItem: IDENT '(' ')'
  { $$=REFALLOC(ConfigItem(0, $1, jalib::TunableValue(), jalib::TunableValue(), jalib::TunableValue())); };
ConfigItem: IDENT '(' Integer ')' 
  { $$=REFALLOC(ConfigItem(0, $1, $3, jalib::TunableValue(), jalib::TunableValue())); };
ConfigItem: IDENT '(' Integer ',' Integer ')' 
  { $$=REFALLOC(ConfigItem(0, $1, $3, $5, jalib::TunableValue())); };
ConfigItem: IDENT '(' Integer ',' Integer ',' Integer ')' 
  { $$=REFALLOC(ConfigItem(0, $1, $3, $5, $7)); };
ConfigItem: IDENT '(' Float ')' 
  { $$=REFALLOC(ConfigItem(0, $1, $3, jalib::TunableValue(), jalib::TunableValue())); };
ConfigItem: IDENT '(' Float ',' Float ')' 
  { $$=REFALLOC(ConfigItem(0, $1, $3, $5, jalib::TunableValue())); };
ConfigItem: IDENT '(' Float ',' Float ',' Float ')' 
  { $$=REFALLOC(ConfigItem(0, $1, $3, $5, $7)); };


ConfigItem: IDENT ConfigItem {
  P($$=$2);
  if(strcmp($1, "double")==0)
    $$->addFlag(ConfigItem::FLAG_DOUBLE);
  else if(strcmp($1, "float")==0)
    $$->addFlag(ConfigItem::FLAG_DOUBLE);
  else if(strcmp($1, "sizespecific")==0)
    $$->addFlag(ConfigItem::FLAG_SIZESPECIFIC);
  else if(strcmp($1, "accuracyhint")==0)
    $$->addFlag(ConfigItem::FLAG_ACCURACY);
  else {
    JASSERT(false)($1).Text("unknown keyword");
  }
}

ConfigItem: IDENT '(' Integer ')' ConfigItem {
  P($$=$5);
  if(strcmp($1, "array")==0){
    $$->addFlag(ConfigItem::FLAG_ARRAY);
    $$->setArraySize($3);
  }else if(strcmp($1, "initial")==0)
    $$->setInitial($3);
  else if(strcmp($1, "min")==0)
    $$->setMin($3);
  else if(strcmp($1, "max")==0)
    $$->setMax($3);
  else {
    JASSERT(false)($1).Text("unknown keyword");
  }
}

ConfigItem: IDENT '(' Float ')' ConfigItem {
  P($$=$5);
  if(strcmp($1, "initial")==0)
    $$->setInitial($3);
  else if(strcmp($1, "min")==0)
    $$->setMin($3);
  else if(strcmp($1, "max")==0)
    $$->setMax($3);
  else {
    JASSERT(false)($1).Text("unknown keyword");
  }
}


ConfigItemType: KW_CONFIG           { $$=ConfigItem::FLAG_FROMCFG|ConfigItem::FLAG_USER; }
              | KW_TUNABLE          { $$=ConfigItem::FLAG_FROMCFG|ConfigItem::FLAG_USER|ConfigItem::FLAG_TUNABLE; }
              | KW_ACCURACYVARIABLE { $$=ConfigItem::FLAG_FROMCFG|ConfigItem::FLAG_USER
                                        |ConfigItem::FLAG_ACCURACY|ConfigItem::FLAG_SIZESPECIFIC
                                        |ConfigItem::FLAG_TUNABLE; };

TemplateArg: IDENT '(' Integer ',' Integer ')' {
  $$=REFALLOC(TemplateArg($1, $3, $5));
}
TemplateArgs: TemplateArg                  { ($$=REFALLOC(TemplateArgList()))->push_back($1); }
            | TemplateArgs ',' TemplateArg { P($$=$1)->push_back($3); }
                                               
/*TestCase: Nil            { $$=REFALLOC(TestC ase()); }
       | TestCase IDENT { ($$=$1)->addMatrix($ 2); }; */
                                               
MatrixDef: IDENT OptVersion OptSize {          
  $$=REFALLOC(MatrixDef($1,*$2,*$3));          
};                                             
                                               
OptVersion: Nil                          { ($$=REFALLOC(FormulaList())); }
          | '<' Formula              '>' { ($$=REFALLOC(FormulaList()))->push_back($2); }
          | '<' Formula Dots Formula '>'       
{                                              
  $$=REFALLOC(FormulaList()); 
  $$->push_back($2);
  $$->push_back($4);
};

OptSize: Nil                 { $$=REFALLOC(FormulaList()); }
       | '[' FormulaList ']' { P($$=$2); };

Formula: IDENT   {$$=REFALLOC( FormulaVariable($1) ); }
       | Integer {$$=REFALLOC( FormulaInteger( $1) ); }
       | Float   {$$=REFALLOC( FormulaFloat(  $1) );  }
       | '(' Formula ')' { $$=$2; } 
       | FormulaExpr     { $$=$1; };

FormulaExpr: Formula '+' Formula { $$=REFALLOC(FormulaBinop<'+'>($1,$3)); }
           | Formula '-' Formula { $$=REFALLOC(FormulaBinop<'-'>($1,$3)); }
           | Formula '*' Formula { $$=REFALLOC(FormulaBinop<'*'>($1,$3)); }
           | Formula '/' Formula { $$=REFALLOC(FormulaBinop<'/'>($1,$3)); }
           | Formula '^' Formula { $$=REFALLOC(FormulaBinop<'^'>($1,$3)); }
           | '-' Formula { $$=REFALLOC(FormulaBinop<'-'>(FormulaInteger::zero(),$2)); };

FormulaRelation: Formula '='   Formula { $$=REFALLOC(FormulaBinop<'='>($1,$3)); }
               | Formula KW_EQ Formula { $$=REFALLOC(FormulaBinop<'='>($1,$3)); }
               | Formula '<'   Formula { $$=REFALLOC(FormulaBinop<'<'>($1,$3)); }
               | Formula '>'   Formula { $$=REFALLOC(FormulaBinop<'>'>($1,$3)); }
               | Formula KW_LE Formula { $$=REFALLOC(FormulaLE($1,$3)); }
               | Formula KW_GE Formula { $$=REFALLOC(FormulaGE($1,$3)); }
               | FormulaRelation KW_OR Formula { JASSERT(false).Text("|| in where clauses not yet supported"); };

TransformBody: '{' RuleList '}' { P($$=$2); };

Rule: RuleHeader RuleBody OptSemiCol { P($$=$1)->setBody($2, yyloc); };

RuleHeader: BaseRuleHeader          { P($$=$1); }
          | PriorityFlag RuleHeader { P($$=$2)->setPriority($1); }
          | KW_ROTATABLE RuleHeader { P($$=$2)->addRotations(RuleFlags::ROTATE); }
          | KW_RECURSIVE RuleHeader { P($$=$2)->markRecursive(); }
          | KW_RECURSIVE '(' Formula ')' RuleHeader { P($$=$5)->markRecursive($3); }
          | KW_DUPLICATE '(' IDENT ',' Integer ',' Integer ')' RuleHeader { P($$=$9)->addDuplicateVar($3, $5, $7); }
          | KW_RULE IDENT RuleHeader { P($$=$3)->setLabel($2); };

BaseRuleHeader: Region       RuleHeaderFrom RuleHeaderThrough OptWhere { $$=REFALLOC(UserRule($1,  *$2, *$3, *$4)); }
              | RuleHeaderTo RuleHeaderFrom RuleHeaderThrough OptWhere { $$=REFALLOC(UserRule(*$1, *$2, *$3, *$4)); };

RuleHeaderFrom: KW_FROM '(' NamedRegionList ')'     { P($$=$3); };
RuleHeaderTo:   KW_TO   '(' NamedRegionList ')'     { P($$=$3); };
RuleHeaderThrough: KW_THROUGH '(' MatrixDefList ')' { P($$=$3); }
               | Nil { $$=REFALLOC(MatrixDefList()); };

PriorityFlag: KW_PRIMARY                  {$$=RuleFlags::PRIORITY_PRIMARY;}
            | KW_SECONDARY                {$$=RuleFlags::PRIORITY_SECONDARY;}
            | KW_PRIORITY '(' Integer ')' {$$=$3;};

RuleBody: '{' TOK_RULEBODY /*'}'*/ { ($$=$2); }; // } is handled by lexer

OptWhere: Nil                       { ($$=REFALLOC(FormulaList())); }
        | KW_WHERE FormulaRelations { ($$=$2); };


FormulaRelations: FormulaRelation { ($$=REFALLOC(FormulaList()))->push_back($1); }
                | FormulaRelations KW_AND FormulaRelation { ($$=$1)->push_back($3); };

Region: IDENT OptVersion RegionAccessor { $$=REFALLOC(Region($1,*$2, $3.str,*$3.formulas)); };

RegionAccessor: '.' IDENT '(' OptFormulaList ')' { $$.str=$2; P($$.formulas=$4);}
              | Nil { $$.str="all"; $$.formulas=REFALLOC(FormulaList());};

NamedRegion: Region IDENT             { P($$=$1)->setName($2); }
           | Region IDENT '=' Formula { P($$=$1)->setName($2); $$->setOptionalDefault($4); } ;

OptLT: Nil | '<';
OptGT: Nil | '>';

Dots: '.' '.' |  '.' '.' '.' ;
Nil:;
OptSemiCol : ';' OptSemiCol | Nil;
Integer: TOK_INTEGER { $$=jalib::StringToX<int>($1); };
Float:   TOK_FLOAT   { $$=jalib::StringToX<double>($1); };
FloatOrInt: Float { $$=$1; } | Integer { $$=$1; } | '-' FloatOrInt { $$=-1*$2; }; 

RuleList: Rule          { ($$=REFALLOC(RuleList()))->push_back($1); }
        | RuleList Rule { P($$=$1)->push_back($2); };

TransformList: Transform               { ($$=REFALLOC(TransformList()))->push_back($1); }
             | TransformList Transform { P($$=$1)->push_back($2); };

MatrixDefList: MatrixDef                   { ($$=REFALLOC(MatrixDefList()))->push_back($1); }
             | MatrixDefList ',' MatrixDef { P($$=$1)->push_back($3);                      };

FormulaList: Formula                 { ($$=REFALLOC(FormulaList()))->push_back($1); }
           | FormulaList ',' Formula { P($$=$1)->push_back($3); };

NamedRegionList: Nil                             { ($$=REFALLOC(RegionList())); }
               | NamedRegion                     { ($$=REFALLOC(RegionList()))->push_back($1); }
               | NamedRegionList ',' NamedRegion { P($$=$1)->push_back($3); };


OptFormulaList: Nil         { $$=REFALLOC(FormulaList()); }
              | FormulaList { P($$=$1); };


FreeVars: IDENT             { ($$=REFALLOC(OrderedFreeVars()))->push_back($1); }
        | FreeVars',' IDENT { ($$=$1)->push_back($3); };

FloatList: FloatOrInt               { ($$=REFALLOC(DoubleList()))->push_back($1); }
         | FloatList ',' FloatOrInt { ($$=$1)->push_back($3); };

%%

extern FILE* pbin;

TransformListPtr parsePbFile(const char* filename){
  TransformListPtr ret;
  if(pbcConfig::thePbPreprocessor != "") {
    pbin = popen((pbcConfig::thePbPreprocessor+" \""+filename+"\"").c_str(), "r");
  } else {
    pbin = fopen(filename,"r");
  }
  JASSERT(pbin!=NULL)(filename)(JASSERT_ERRNO).Text("failed to open file");
  pbparse(ret);
  return ret;
}


