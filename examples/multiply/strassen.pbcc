
#include "../simple/add.pbcc"
#include "../simple/transpose.pbcc"
#include "multiply.pbcc"

transform StrassenInner
from A11[n,n], A12[n,n], A21[n,n], A22[n,n],
     B11[n,n], B12[n,n], B21[n,n], B22[n,n]
through M1[n,n], M2[n,n], M3[n,n], M4[n,n], M5[n,n], M6[n,n], M7[n,n]
to   C11[n,n], C12[n,n], C21[n,n], C22[n,n]
{
  to(M1 m1) from(A11 a11, A22 a22, B11 b11, B22 b22) using(t1[n,n], t2[n,n]){
    spawn MatrixAdd(t1, a11, a22);
    spawn MatrixAdd(t2, b11, b22);
    sync;
    MatrixMultiplySqr(m1, t1, t2);
  }
  to(M2 m2) from(A21 a21, A22 a22, B11 b11) using(t1[n,n]){
    MatrixAdd(t1, a21, a22);
    MatrixMultiplySqr(m2, t1, b11);
  }
  to(M3 m3) from(A11 a11, B12 b12, B22 b22) using(t2[n,n]){
    MatrixSub(t2, b12, b22);
    MatrixMultiplySqr(m3, a11, t2);
  }
  to(M4 m4) from(A22 a22, B21 b21, B11 b11) using(t2[n,n]){
    MatrixSub(t2, b21, b11);
    MatrixMultiplySqr(m4, a22, t2);
  }
  to(M5 m5) from(A11 a11, A12 a12, B22 b22) using(t1[n,n]){
    MatrixAdd(t1, a11, a12);
    MatrixMultiplySqr(m5, t1, b22);
  }
  to(M6 m6) from(A21 a21, A11 a11, B11 b11, B12 b12) using(t1[n,n], t2[n,n]){
    spawn MatrixSub(t1, a21, a11);
    spawn MatrixAdd(t2, b11, b12);
    sync;
    MatrixMultiplySqr(m6, t1, t2);
  }
  to(M7 m7) from(A12 a12, A22 a22, B21 b21, B22 b22) using(t1[n,n], t2[n,n]){
    spawn MatrixSub(t1, a12, a22);
    spawn MatrixAdd(t2, b21, b22);
    sync;
    MatrixMultiplySqr(m7, t1, t2);
  }
  
  to(C11 c11) from(M1 m1, M4 m4, M5 m5, M7 m7){
    MatrixAddAddSub(c11, m1, m4, m7, m5);
  }
  to(C12 c12) from(M3 m3, M5 m5){
    MatrixAdd(c12, m3, m5);
  }
  to(C21 c21) from(M2 m2, M4 m4){
    MatrixAdd(c21, m2, m4);
  }
  to(C22 c22) from(M1 m1, M2 m2, M3 m3, M6 m6){
    MatrixAddAddSub(c22, m1, m3, m6, m2);
  }
}

transform Strassen
from A[n,n], B[n,n] 
to C[n,n]
{
  to(C.region(0,   0,   n/2, n/2) c11,
     C.region(n/2, 0,   n,   n/2) c12,
     C.region(0,   n/2, n/2, n)   c21,
     C.region(n/2, n/2, n,   n)   c22)
  from(A.region(0,   0,   n/2, n/2) a11,
       A.region(n/2, 0,   n,   n/2) a12,
       A.region(0,   n/2, n/2, n)   a21,
       A.region(n/2, n/2, n,   n)   a22,
       B.region(0,   0,   n/2, n/2) b11,
       B.region(n/2, 0,   n,   n/2) b12,
       B.region(0,   n/2, n/2, n)   b21,
       B.region(n/2, n/2, n,   n)   b22)
  {
    StrassenInner(c11,c12,c21,c22, a11,a12,a21,a22, b11,b12,b21,b22);
  }
}
  
transform MatrixMultiplySqr
from A[n,n], B[n,n] 
to C[n,n]
{
  to(C c) from(A a, B b){
    if(n>=4){
      Strassen(c,a,b);
    }else{
      MatrixMultiply(c,a,b);
    }
  }
  to(C c) from(A a, B b){
    MatrixMultiply(c,a,b);
  }
}

transform MatrixMultiplySqrTransposed
from A[n,n], B[n,n] 
through T[n,n]
to C[n,n]
{
  // no transpose
  to(C c, T t) from(A a, B b) {
    MatrixMultiplySqr(c, a, b);
  }
  // transpose b
  to(C c, T t) from(A a, B b) {
    Transpose(t,b);
    MatrixMultiplySqr(c, a, t.transposed());
  }
  // transpose a
  to(C c, T t) from(A a, B b) {
    Transpose(t,a);
    MatrixMultiplySqr(c, t.transposed(), b);
  }
}

