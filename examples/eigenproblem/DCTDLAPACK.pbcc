#ifndef DCTDLAPACK_PBCC
#define DCTDLAPACK_PBCC

%{

extern "C" void dstevd_(char *jobz, int *n, double *D, double *E, double *Z, int *ldz, double *work, int *lwork, int *iwork, int *liwork, int *info);

%}

#include "../simple/copy.pbcc"

// Find eigenvalues and eigenvectors of IN (tridiagonal symmetric) by LAPACK Divide-and-Conquer routines, which has a hardcoded cutoff at n=25
transform DCTDLAPACKsub
from Subdiag[n-1]
to Eigenvalue[n], Eigenvector[n,n]
{
 
  to (Eigenvalue eig, Eigenvector vec) from (Subdiag Ein)
  {
    char jobz = 'V';
    int size=n,nsquared=n*n,lwork=-1,liwork=-1,info = 0;

    // allocate and initialize matrices
    double *Z = vec.base();
    double *D = eig.base();
    double *E = Ein.storage()->data();
    double *work = new double[1];
    int *iwork = new int[1];

    // call workspace query to calculate the optimal size of the WORK array
    dstevd_(&jobz, &size, D, E, Z, &size, work, &lwork, iwork, &liwork, &info);
    lwork=work[0];
    delete [] work;
    work = new double[lwork];
    liwork=iwork[0];
    delete [] iwork;
    iwork = new int[liwork];

    // call LAPACK routine dsyev for QR iteration
    dstevd_(&jobz, &size, D, E, Z, &size, work, &lwork, iwork, &liwork, &info);


    delete [] work;
    delete [] iwork;
  }
}

transform DCTDLAPACK
from Diag[n], Subdiag[n-1]
to Eigenvalue[n], Eigenvector[n,n]
{

  to (Eigenvalue eig, Eigenvector vec) from (Diag Din, Subdiag Ein)
  {

	Copy1D(eig, Din);
	DCTDLAPACKsub(eig, vec, Ein);
  }

}

#endif // DCTDLAPACK_PBCC
