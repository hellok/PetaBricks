#ifndef LAPACKMATMUL_PBCC
#define LAPACKMATMUL_PBCC

#define INDEX2D(i0, i1, s0) ((i1) * (s0) + (i0))

#include "../simple/copy.pbcc"

%{
    extern "C" void dgemm_(char *transa, char *transb, const int *m, const int *n, const int *k, double *alpha, double *A, const int *lda, double *B, const int *ldb, double *beta, double *C, const int *ldc);
%}

//calculate OUT = C - A*B
transform LAPACKmatmul
from A[k,m], B[n,k], C[n,m]
to OUT[n,m]
{
    to (OUT out)
    from (A ina, B inb, C inc)
    {
        // call LAPACK

	char transa = 'N', transb = 'N';  
	const int lda = m;
	const int ldb = k;
	const int ldc = m;
	double alpha = -1, beta = 1;
        double *A = NULL;
	double *B = NULL;
	double *C = NULL;

        A = new double[m * k];
	B = new double[k * n];
	C = new double[m * n];
        if (!A || !B || !C) {
            printf("Error allocating memory!\n");
            exit(-1);
        }

        // pack input
        int i, j;
        for (i = 0; i < m; ++i) {
            for (j = 0; j < k; ++j) {
		// PetaBricks - first index is column, second is row
                A[INDEX2D(i, j, m)] = ina.cell(j, i);
            }
        }
        for (i = 0; i < k; ++i) {
            for (j = 0; j < n; ++j) {
                // PetaBricks - first index is column, second is row
                B[INDEX2D(i, j, k)] = inb.cell(j, i);
            }
        }
        for (i = 0; i < m; ++i) {
            for (j = 0; j < n; ++j) {
                // PetaBricks - first index is column, second is row
                C[INDEX2D(i, j, m)] = inc.cell(j, i);
            }
        }

        dgemm_(&transa, &transb, &m, &n, &k, &alpha, A, &lda, B, &ldb, &beta, C, &ldc);

        // unpack output
        for (i = 0; i < n; ++i) {
            for (j = 0; j < m; ++j) {
                out.cell(i, j) = C[INDEX2D(j, i, m)];
            }
        }

        delete [] A;
	delete [] B;
	delete [] C;
    }
}



#endif // LAPACKMATMUL_PBCC

