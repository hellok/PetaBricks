#ifndef TRILSOLVE_PBCC
#define TRILSOLVE_PBCC

#include "../simple/copy.pbcc"
#include "../multiply/multiply.pbcc"
#include "msub.pbcc"

// Solve LX=B for X, i.e. X = inv(L)*B, where L is the lower triangular part of A

//transform RightLookingTrilsolve
//from A[n,n], IN[m,n]
//through X<n>[m,n]
//to OUT[m,n]
//{
//}

transform LeftLookingTrilsolve
from A[n,n], B[m,n]
through INTER[m,n]
to X[m,n]
{


/*
  primary X.cell(i,0) from (B.cell(i,0) b, A.cell(0,0) a) {
        return b/a;
  }

  primary INTER.cell(i,0) from (B.cell(i,0) b) {
        return b;
  }
  X.cell(i,j) from (INTER.cell(i,j) inter, B.cell(i,j) b, A.cell(j,j) ajj) {
        return inter;
  }
*/


  primary to (X.row(0) x ) from (B.row(0) b, A.cell(0,0) a) {
        for (int i=0; i<m; i++ ){
                x.cell(i)=b.cell(i)/a;
        }
  }

  primary to (INTER.row(0) inter) from (B.row(0) b) {
        Copy1D(inter, b);
  }

  to (X.region(0,j,m,j+1) xout)
  from (X.region(0,0,m , j) x, A.region(0, j, j, j+1) a, B.region(0,j,m,j+1) b, A.cell(j,j) ajj)
  {
        MatrixRegion2D temp = MatrixRegion2D::allocate(m, 1);
        MatrixMultiply(temp,a,x);
        Msubtract(xout,b,temp, ajj);
  }



} 

transform trilsolve
from A[n,n], B[m,n]
to X[m,n]
{
  to (X out) from (A a, B in) {
	LeftLookingTrilsolve(out,a, in);
  }

//  to (X out) from (A a, B in) {
//	RightLookingTrilsolve(out, a, in);
//  }
}

#endif // TRILSOLVE_PBCC

