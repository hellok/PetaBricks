#ifndef LUDENSE_PBCC
#define LUDENSE_PBCC

#define INDEX2D(i0, i1, s0) ((i1) * (s0) + (i0))

#include "../simple/copy.pbcc"

%{
    extern "C" void dgetrf_(const int *m, const int *n, double *A, const int *lda, int *ipiv, int *info);
%}

transform LUDense
from IN[n,n]
to OUT[n,n], P[n]
{
    to (OUT out, P p)
    from (IN in)
    {
        // call LAPACK

        const int m = n, lda = n;
        int info = 0, *ipiv = NULL;
        double *A = NULL;

        A = new double[n * n];
        ipiv = new int[n];
        if (!A || !ipiv) {
            printf("Error allocating memory!\n");
            exit(-1);
        }

        // pack input
        int i, j;
        for (i = 0; i < n; ++i) {
            for (j = 0; j < n; ++j) {
		// PetaBricks - first index is column, second is row
                A[INDEX2D(i, j, n)] = in.cell(j, i);
            }
        }

        dgetrf_(&m, &n, A, &lda, ipiv, &info);
        if (info) {
            printf("LAPACK error in call to dppsv: info = %d\n", info);
            exit(-1);
        }

        // unpack output
        for (i = 0; i < n; ++i) {
            for (j = 0; j < n; ++j) {
                out.cell(i, j) = A[INDEX2D(j, i, n)];
            }
        }
        for (i = 0; i < n; ++i) {
            p.cell(i) = ipiv[i];
        }

        delete [] ipiv;
        delete [] A;
    }
}

/* Complicated Version (By-element version, no pivoting. Verified it works) */

/*
transform LUnopivot
from IN[n,n]
through A<n-1>[n,n]
to OUT[n,n]
{
  to (A<0> a0) from (IN in) {
        Copy2D(a0, in);
  }


  primary to (A<k+1>.cell(j,i) aNext)
  from (A<k>.cell(j,i) aPrev,
        A<k+1>.cell(k,i) left,
        A<k>.cell(j,k) up)
  where k < i && k < j
  {
        aNext = aPrev - left * up;
  }


  to (A<k+1>.cell(j,i) aNext)
  from (A<k>.cell(j,i) aPrev,
        A<k>.cell(j,k) up)
  where i > j && k == j
  {
        aNext = aPrev / up;
  }

  to (A<k+1>.cell(i,j) aNext)
  from (A<k>.cell(i,j) aPrev)
  {
        aNext = aPrev;
  }

  to (OUT out) from (A<n-1> an) {
        Copy2D(out, an);
  }
}
*/


#endif // LUDENSE_PBCC

