#ifndef BLOCKEDLUDENSE_PBCC
#define BLOCKEDLUDENSE_PBCC

#include "trilsolve.pbcc"
#include "triusolve.pbcc"
#include "ltri.pbcc"
#include "LUDense.pbcc"
#include "../simple/copy.pbcc"
#include "../multiply/multiply.pbcc"
#include "../simple/add.pbcc"

transform blockedLUDense
from IN[n, n]
to OUT[n, n]
{

    // all blocks either on diagonal or entirely in upper or lower triangle

    to   (OUT.region(i, i, k, k) out)
    from ( IN.region(i, i, k, k) old,
          OUT.region(0, i, i, k) left,
          OUT.region(i, 0, k, i) up)
    {
        //out = old - left * up;
        MatrixRegion2D temp = MatrixRegion2D::allocate(k - i, k - i);
        MatrixMultiply(out,left,up);
        MatrixSub(temp,old,out);
        LUnopivot(out,temp);
    }

    to   (OUT.region(i, j, k, l) out)
    from ( IN.region(i, j, k, l) old,
          OUT.region(0, j, j, l) left,
          OUT.region(i, 0, k, j) up,
          OUT.region(j, j, l, l) diag)
    where i > j // in upper triangle
    {
        //out = old - left * up;
        MatrixRegion2D temp = MatrixRegion2D::allocate(k - i, l - j);
        MatrixMultiply(temp, left, up);
        MatrixSub(temp, old, temp);
        MatrixRegion2D L = MatrixRegion2D::allocate(l-j,l-j);
        ltri(L, diag);
        trilsolve(out, L, temp);
    }

    to   (OUT.region(i, j, k, l) out)
    from ( IN.region(i, j, k, l) old,
          OUT.region(0, j, i, l) left,
          OUT.region(i, 0, k, i) up,
          OUT.region(i, i, k, k) diag)
    where i < j // in lower triangle
    {
        //out = old - left * up;
        MatrixRegion2D temp = MatrixRegion2D::allocate(k - i, l - j);
        MatrixMultiply(temp, left,up);
        MatrixSub(temp,old,temp);
        triusolve(out, diag, temp);
    }

}


#endif // BLOCKEDLUDENSE_PBCC
