#ifndef LINEARSOLVEPOSDEF_PBCC
#define LINEARSOLVEPOSDEF_PBCC

%{
extern "C" void dppsv_(char *uplo, int *n, int *nrhs, double *A, double *B, int *ldb, int *info);
%}

transform LinearSolvePosDef
from A[n,n], B[n,nrhs]
to X[n,nrhs]
{
  to (X x) from (A a, B b)
  {
    char uplo = 'L';
    int index, info = 0, nInt = n, nrhsInt = nrhs;

    // allocate flat matrix and RHS/solution vectors
    double *aPacked = new double[n * (n + 1) / 2];
    double *bFlat = new double[n * nrhs];
    if (!aPacked || !bFlat) {
      printf("Error allocating memory!\n");
      exit(-1);
    }

    // copy data to flat matrix and RHS/solution vectors
    index = 0;
    for (int j = 0; j < n; j++) {
      for (int i = j; i < n; i++) {
        aPacked[index++] = a.cell(i, j);
      }
    }
    index = 0;
    for (int j = 0; j < nrhs; j++) {
      for (int i = 0; i < n; i++) {
        bFlat[index++] = b.cell(i, j);
      }
    }

    // call LAPACK to do linear solve
    dppsv_(&uplo, &nInt, &nrhsInt, aPacked, bFlat, &nInt, &info);

    if (info) {
      printf("LAPACK error in call to dppsv: info = %d\n", info);
      exit(-1);
    }

    // copy solution to output
    index = 0;
    for (int j = 0; j < nrhs; j++) {
      for (int i = 0; i < n; i++) {
        x.cell(i, j) = bFlat[index++];
      }
    }

    delete [] aPacked;
    delete [] bFlat;
  }
}

#endif // LINEARSOLVEPOSDEF_PBCC

