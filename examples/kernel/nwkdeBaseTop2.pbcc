#ifndef NWKDE_BASE
#define NWKDE_BASE

#define DEBUG

transform NWKDEBase
from INPUT[n,n]
to RESULT[n]
through SQDIFFS[n,n], WEIGHTS[n,n], PARTIALS[n,n]
{
    /* METHOD 1: compute PARTIALS by exposing the most fine-grained
       parallelism.  this method may be less cache-efficient. */

    to   (SQDIFFS.cell(i,j) sqDiff)
    from (  INPUT.cell(i,j) input)
    {
        sqDiff = input;
#ifdef DEBUG
        fprintf(stderr, "method 1:  sqdiff(%d,%d) = %g\n", i, j, sqDiff);
#endif
    }

    to   (WEIGHTS.cell(i,j) weight)
    from (SQDIFFS.cell(i,j) sqDiff)
    {
        weight = sqDiff;
#ifdef DEBUG
        fprintf(stderr, "method 1:  weight(%d,%d) = %g\n", i, j, weight);
#endif
    }

    to   (PARTIALS.cell(i,j) partial)
    from ( WEIGHTS.cell(i,j) weight)
    {
        partial = weight;
#ifdef DEBUG
        fprintf(stderr, "method 1: partial(%d,%d) = %g\n", i, j, partial);
#endif
    }

    /* METHOD 2: Compute weights and partials directly with one pass through the data */

    to   (PARTIALS.cell(i,j) partial,
           WEIGHTS.cell(i,j) weight)
    from (   INPUT.cell(i,j) input)
    {
        partial = weight = input;
#ifdef DEBUG
        fprintf(stderr, "method 2:  weight(%d,%d) = %g\n", i, j,  weight);
        fprintf(stderr, "method 2: partial(%d,%d) = %g\n", i, j, partial);
#endif
    }

    /* Once we have the PARTIALS and WEIGHTS, we can compute RESULT */

    to   (  RESULT.cell(i) result)
    from (PARTIALS.row(i)  partials,
           WEIGHTS.row(i)  weights)
    {
        double partialSum, weightSum;
        partialSum = 0;
        weightSum = 0;
        for (int i = 0; i < n; ++i) {
            partialSum += partials.cell(i);
             weightSum +=  weights.cell(i);
        }
        result = partialSum / weightSum;
#ifdef DEBUG
        fprintf(stderr, " weightSum(%d) = %g\n", i, weightSum);
        fprintf(stderr, "partialSum(%d) = %g\n", i, partialSum);
        fprintf(stderr, "    result(%d) = %g\n", i, result);
#endif // DEBUG
    }
}

#endif // NWKDE_BASE
