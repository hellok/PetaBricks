#ifndef POISSON2DMG_PBCC
#define POISSON2DMG_PBCC

//Multigrid V-cycle 2D
//assume dimension n = 2^k + 1

#include "Poisson2DConfig.h"

#include "../simple/add.pbcc"
#include "Interpolate2Dnew.pbcc"
#include "Restrict2Dnew.pbcc"
#include "Poisson2DResidual.pbcc"
#include "Poisson2DSOR.pbcc"
#include "Poisson2DDirect.pbcc"
#include "Poisson2DAccuracyMetric.pbcc"
#include "Generators.pbcc"

// Uncomment the following define to enable debug execution
// #define DEBUG

// Uncomment the following define to remove the direct option
// #define NODIRECT

transform Poisson2DMGRecurse
from X[n,n], B[n,n], NumIters
to Y[n,n]
through Z[(n+1)/2,(n+1)/2]
{
    to (Z.cell(i,j) z) from () {
        z = 0;
    }

    to (Y y) from (X x, B b, Z z, NumIters numIters)
    {
        int level = (int) log2(n - 1);

        if (level <= 1) {

            PetabricksRuntime::abort();

        } else {

            MatrixRegion2D t1 = MatrixRegion2D::allocate(n, n);
            MatrixRegion2D t2 = MatrixRegion2D::allocate(n, n);
            MatrixRegion2D r1 = MatrixRegion2D::allocate((n+1)/2, (n+1)/2);
            MatrixRegion2D r2 = MatrixRegion2D::allocate((n+1)/2, (n+1)/2);

            // copy input to output
            Copy2D(y, x);

            // iterate the recursive call for iters iterations
            for (int i = 0; i < (int) numIters; i++) {

                // compute residual and solve on coarser grid with zero
                // initial guess, then map the coarse solution back to the
                // fine grid by interpolation

                Poisson2DSOR(t1, y, b, -2, 1);     // t1 gets relaxed guess
                Poisson2DResidual(t2, t1, b);      // t2 gets new residual
                Restrict2Dnew(r1, t2);             // r1 gets restricted residual
                Poisson2DMG<0>(r2, z, r1);         // r2 gets coarse update
                Interpolate2Dnew(t2, r2);          // t2 gets interpolated update
                MatrixAdd(t2, t2, t1);             // t2 gets updated guess
                Poisson2DSOR(y, t2, b, -2, 1);     //  y gets relaxed guess
            }
        }
    }
}

transform Poisson2DMG
from X[n,n], B[n,n]
to  Y[n,n]
accuracy_bins POISSON2D_BINS
accuracy_variable numIterations
accuracy_metric Poisson2DAccuracyMetric
generator POISSON2D_GENERATOR
{
#ifndef NODIRECT
    //base case: directly solve
    to(Y y) from(X x, B b) {
#ifdef DEBUG
        printf("Direct case called for n = %d\n", n);
#endif // DEBUG
        Poisson2DDirect(y, x, b);
    }
#endif // NODIRECT

    //base case: solve iteratively with SOR
    to(Y y) from(X x, B b) {
#ifdef DEBUG
        printf("SOR case called for n = %d (%d iterations)\n", n, (int) numIterations);
#endif
        Poisson2DSOR(y, x, b, -1, (int) numIterations);
    }

#if 0
    //base case: solve iteratively with RefMG
    to(Y y) from(X x, B b) {
#ifdef DEBUG
        printf("RefMG case called for n = %d (%d iterations)\n", n, (int) numIterations);
#endif
        Poisson2DRefMG(y, x, b, (int) numIterations);
    }
#endif

    //solve recursively on coarser grids

    to (Y y) from(X x, B b) {
#ifdef DEBUG
        printf("recursive case called for n = %d (%d iterations)\n",
               n, (int) numIterations);
#endif
        JASSERT(n >= 3)(n).Text("input must be >= 3");
        JASSERT(floor(log2(n-1)) == log2(n-1))(n).Text("input must be 2^k+1");
        JASSERT((int) numIterations >= 0)((int) numIterations).Text("num iterations must be non-negative");

        Poisson2DMGRecurse(y, x, b, (int) numIterations);
    }
}

#endif // POISSON2DMG_PBCC
