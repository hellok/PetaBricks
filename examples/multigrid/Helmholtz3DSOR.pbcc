#ifndef HELMHOLTZ3DSOR_PBCC
#define HELMHOLTZ3DSOR_PBCC

#include "../simple/copy.pbcc"
#include "Helmholtz3DDirect.pbcc"
#include "Generators.pbcc"

// performance note: OUT can point to the same matrix region as IN
// because of red-black pattern
transform Helmholtz3DSORIterate
from IN[n,n,n], A[n,n,n],
     B0[n+1,n,n], B1[n,n+1,n], B2[n,n,n+1],
     RHS[n,n,n], ALPHA, BETA, DX, WEIGHT, PARITY
to OUT[n,n,n]
{
  // interior point
  OUT.cell(i,j,k) from ( IN.cell(i  ,j  ,k  ) me,
                         IN.cell(i-1,j  ,k  ) we,
                         IN.cell(i+1,j  ,k  ) ea,
                         IN.cell(i  ,j-1,k  ) no,
                         IN.cell(i  ,j+1,k  ) so,
                         IN.cell(i  ,j  ,k-1) fr,
                         IN.cell(i  ,j  ,k+1) ba,
                          A.cell(i  ,j  ,k  ) a,
                         B0.cell(i  ,j  ,k  ) bwe,
                         B0.cell(i+1,j  ,k  ) bea,
                         B1.cell(i  ,j  ,k  ) bno,
                         B1.cell(i  ,j+1,k  ) bso,
                         B2.cell(i  ,j  ,k  ) bfr,
                         B2.cell(i  ,j  ,k+1) bba,
                        RHS.cell(i  ,j  ,k  ) rhs,
                        ALPHA alpha, BETA beta,
                        DX dx, WEIGHT w, PARITY p)
  {
    if ((((int) (i + j + k)) & 1) == p) {
      double dxSq = dx * dx;
      double K = alpha * a + beta / dxSq * (bwe + bea + bno + bso + bfr + bba);
      double newVal = (beta / dxSq * (bwe * we + bea * ea + bno * no +
                                      bso * so + bfr * fr + bba * ba) + rhs) / K;
      return (1 - w) * me + w * newVal;
    } else {
      return me;
    }
  }

  // boundary point
  secondary
  OUT.cell(i,j,k) from ( IN.cell(i  ,j  ,k  ) me,
                         IN.cell(i-1,j  ,k  ) r_we = OPTIONAL,
                         IN.cell(i+1,j  ,k  ) r_ea = OPTIONAL,
                         IN.cell(i  ,j-1,k  ) r_no = OPTIONAL,
                         IN.cell(i  ,j+1,k  ) r_so = OPTIONAL,
                         IN.cell(i  ,j  ,k-1) r_fr = OPTIONAL,
                         IN.cell(i  ,j  ,k+1) r_ba = OPTIONAL,
                          A.cell(i  ,j  ,k  ) a,
                         B0.cell(i  ,j  ,k  ) bwe,
                         B0.cell(i+1,j  ,k  ) bea,
                         B1.cell(i  ,j  ,k  ) bno,
                         B1.cell(i  ,j+1,k  ) bso,
                         B2.cell(i  ,j  ,k  ) bfr,
                         B2.cell(i  ,j  ,k+1) bba,
                        RHS.cell(i  ,j  ,k  ) rhs,
                        ALPHA alpha, BETA beta,
                        DX dx, WEIGHT w, PARITY p)
  {
    double we, ea, no, so, fr, ba;

    we = (IS_MISSING(r_we) ? -me : r_we);
    ea = (IS_MISSING(r_ea) ? -me : r_ea);
    no = (IS_MISSING(r_no) ? -me : r_no);
    so = (IS_MISSING(r_so) ? -me : r_so);
    fr = (IS_MISSING(r_fr) ? -me : r_fr);
    ba = (IS_MISSING(r_ba) ? -me : r_ba);

    if ((((int) (i + j + k)) & 1) == p) {
      double dxSq = dx * dx;
      double K = alpha * a + beta / dxSq * (bwe + bea + bno + bso + bfr + bba);
      double newVal = (beta / dxSq * (bwe * we + bea * ea + bno * no +
                                      bso * so + bfr * fr + bba * ba) + rhs) / K;
      return (1 - w) * me + w * newVal;
    } else {
      return me;
    }
  }
}

// performance note: OUT can point to the same matrix region as IN
transform Helmholtz3DSOR
from IN[n,n,n], A[n,n,n], B0[n+1,n,n], B1[n,n+1,n], B2[n,n,n+1],
     RHS[n,n,n], ALPHA, BETA, DX, WEIGHT, NUMITERS
to OUT[n,n,n]
generator Helmholtz3DSORGenerator
{
  to (OUT out) from (IN in, A a, B0 b0, B1 b1, B2 b2,
                     RHS rhs, ALPHA alpha, BETA beta,
                     DX dx, WEIGHT r_w, NUMITERS numIters)
  {
    // if iterations is 0, just copy to output
    if ((int) numIters == 0) {
      Copy3D(out, in);
      return;
    }

    // if base case, use direct solver
    if (n == 1) {
      Helmholtz3DDirect(out, a, b0, b1, b2, rhs, alpha, beta, dx);
      return;
    }

    // decode sentinel values for the weight:
    //  -1 : choose value for iterative solve
    //  -2 : choose value for use inside multigrid V-cycles
    //
    // for now, both values default to 0.9 since I don't know what else to use
    double w = (r_w == -1 || r_w == -2 ? 0.9 : r_w);

    Helmholtz3DSORIterate(out,  in, a, b0, b1, b2, rhs, alpha, beta, dx, w, 0); // red
    Helmholtz3DSORIterate(out, out, a, b0, b1, b2, rhs, alpha, beta, dx, w, 1); // black
    for (int i = 1; i < (int) numIters; i++) {
      Helmholtz3DSORIterate(out, out, a, b0, b1, b2, rhs, alpha, beta, dx, w, 0); // red
      Helmholtz3DSORIterate(out, out, a, b0, b1, b2, rhs, alpha, beta, dx, w, 1); // black
    }
  }
}

#endif // HELMHOLTZ3DSOR_PBCC
