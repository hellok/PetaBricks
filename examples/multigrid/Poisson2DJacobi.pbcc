#ifndef POISSON2DJACOBI_PBCC
#define POISSON2DJACOBI_PBCC

#include "Poisson2DJacobiInterior.pbcc"
#include "Generators.pbcc"

transform Poisson2DJacobi
from IN[n,n], B[n,n], numIterations
to OUT[n,n]
through BTEMP[n-2,n-2]
generator Poisson2DJacobiGenerator
{
  BTEMP.cell(i,j) from(B.cell(i + 1, j + 1) b,
                       IN.cell(i, j + 1) no,
                       IN.cell(i + 2, j + 1) so,
                       IN.cell(i + 1, j) we,
                       IN.cell(i + 1, j + 2) ea)
  {
    double result = b;
    if (i == 0) result += no;
    if (i == n - 3) result += so;
    if (j == 0) result += we;
    if (j == n - 3) result += ea;
    return result;
  }

  primary to (OUT.region(1,1,n-1,n-1) o) from (IN.region(1,1,n-1,n-1) in,
                                               BTEMP b,
                                               numIterations num)
  {
    if (n == 3) {
      o.cell(0, 0) = b.cell(0, 0) / 4;
    } else {
      Poisson2DJacobiInterior(o, in, b, num);
    }
  }

  secondary OUT.cell(i,j) from (IN.cell(i,j) x)
  {
    return x;
  }
}

#endif // POISSON2DJACOBI_PBCC
