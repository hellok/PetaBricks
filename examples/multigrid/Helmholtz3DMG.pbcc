#ifndef HELMHOLTZ3DMG_PBCC
#define HELMHOLTZ3DMG_PBCC

// 3D Helmholtz Multigrid V-cycle
// assume dimension n = 2^k

#include "Helmholtz3DConfig.h"

#include "../simple/add.pbcc"
#include "../simple/copy.pbcc"
#include "Interpolate3D.pbcc"
#include "Restrict3D.pbcc"
#include "Helmholtz3DResidual.pbcc"
#include "Helmholtz3DSOR.pbcc"
#include "Helmholtz3DDirect.pbcc"
#include "Helmholtz3DAccuracyMetric.pbcc"
#include "Generators.pbcc"

// Uncomment the following define to enable debug execution
// #define DEBUG

// Uncomment the following define to remove the direct option
// #define NODIRECT

transform Helmholtz3DMGRecurse
from IN[n,n,n], A[n,n,n], B0[n+1,n,n], B1[n,n+1,n], B2[n,n,n+1],
     RHS[n,n,n], ALPHA, BETA, DX, NUMITERS
to OUT[n,n,n]
through Z[n/2,n/2,n/2]
{
    Z.cell(i,j,k) from () {
        return 0;
    }

    to (OUT out) from (IN in, A a, B0 b0, B1 b1, B2 b2, RHS rhs, ALPHA alpha,
                       BETA beta, DX dx, NUMITERS numIters, Z z)
    {
        JASSERT(n >= 1)(n).Text("input must be >= 1");
        JASSERT(floor(log2(n)) == log2(n))(n).Text("input must be 2^k");
        JASSERT(numIters >= 0)(numIters).Text("num iterations must be non-negative");

        if (numIters == 0) {
            Copy3D(out, in);
            return;
        }

        if (n == 1) {
            Helmholtz3DDirect(out, a, b0, b1, b2, rhs, alpha, beta, dx);
            return;
        }

        MatrixRegion3D t1 = MatrixRegion3D::allocate(n, n, n);
        MatrixRegion3D t2 = MatrixRegion3D::allocate(n, n, n);
        MatrixRegion3D r1 = MatrixRegion3D::allocate(n/2, n/2, n/2);
        MatrixRegion3D r2 = MatrixRegion3D::allocate(n/2, n/2, n/2);

        // allocate restricted coefficient arrays
        MatrixRegion3D  aR = MatrixRegion3D::allocate(n/2  , n/2  , n/2  );
        MatrixRegion3D b0R = MatrixRegion3D::allocate(n/2+1, n/2  , n/2  );
        MatrixRegion3D b1R = MatrixRegion3D::allocate(n/2  , n/2+1, n/2  );
        MatrixRegion3D b2R = MatrixRegion3D::allocate(n/2  , n/2  , n/2+1);

        // compute restricted coefficient arrays
        Restrict3D(aR, a);
        Restrict3DB0(b0R, b0);
        Restrict3DB1(b1R, b1);
        Restrict3DB2(b2R, b2);

        for (int i = 0; i < numIters; ++i) {
            // t1 gets relaxed guess
            if (i == 0) {
                Helmholtz3DSOR(t1,  in, a, b0, b1, b2, rhs, alpha, beta, dx, -2, 1);
            } else {
                Helmholtz3DSOR(t1, out, a, b0, b1, b2, rhs, alpha, beta, dx, -2, 1);
            }
            // t2 gets new residual
            Helmholtz3DResidual(t2, t1, a, b0, b1, b2, rhs, alpha, beta, dx);
            // r1 gets restricted residual
            Restrict3D(r1, t2);
            // r2 gets coarse update
            Helmholtz3DMG<0>(r2, z, aR, b0R, b1R, b2R, r1, alpha, beta, 2 * dx);
            // t2 gets interpolated update
            Interpolate3D(t2, r2);
            // t2 gets updated guess
            Add3D(t2, t2, t1);
            //  y gets relaxed guess
            Helmholtz3DSOR(out, t2, a, b0, b1, b2, rhs, alpha, beta, dx, -2, 1);
        }
    }
}

transform Helmholtz3DMG
from IN[n,n,n], A[n,n,n], B0[n+1,n,n], B1[n,n+1,n], B2[n,n,n+1],
     RHS[n,n,n], ALPHA, BETA, DX
to OUT[n,n,n]
accuracy_bins HELMHOLTZ3D_BINS
accuracy_variable numIterations
accuracy_metric Helmholtz3DAccuracyMetric
generator HELMHOLTZ3D_GENERATOR
{
#ifndef NODIRECT
    //base case: directly solve
    to (OUT out) from (A a, B0 b0, B1 b1, B2 b2, RHS rhs,
                       ALPHA alpha, BETA beta, DX dx)
    {
#ifdef DEBUG
        printf("Direct case called for n = %d\n", n);
#endif // DEBUG
        Helmholtz3DDirect(out, a, b0, b1, b2, rhs, alpha, beta, dx);
    }
#endif // NODIRECT

    //base case: solve iteratively with SOR
    to (OUT out) from (IN in, A a, B0 b0, B1 b1, B2 b2,
                       RHS rhs, ALPHA alpha, BETA beta, DX dx)
    {
#ifdef DEBUG
        printf("SOR case called for n = %d, (%d iterations)\n", n, numIterations);
#endif
        Helmholtz3DSOR(out, in, a, b0, b1, b2, rhs, alpha, beta, dx, -1, numIterations);
    }

    //solve recursively on coarser grids

    to (OUT out) from (IN in, A a, B0 b0, B1 b1, B2 b2,
                       RHS rhs, ALPHA alpha, BETA beta, DX dx)
    {
#ifdef DEBUG
        printf("recursive case called for n = %d, (%d iterations)\n",
               n, numIterations);
#endif
        Helmholtz3DMGRecurse(out, in, a, b0, b1, b2, rhs, alpha, beta, dx,
                             numIterations);
    }
}

#endif // HELMHOLTZ3DMG_PBCC
