#ifndef HELMHOLTZ3DREFFMG_PBCC
#define HELMHOLTZ3DREFFMG_PBCC

// 3D Helmholtz Reference Multigrid V-cycle
// assume dimension n = 2^k

#include "../simple/add.pbcc"
#include "../simple/copy.pbcc"
#include "Interpolate3D.pbcc"
#include "Restrict3D.pbcc"
#include "Helmholtz3DDirect.pbcc"
#include "Helmholtz3DResidual.pbcc"
#include "Helmholtz3DSOR.pbcc"
#include "Helmholtz3DRefMG.pbcc"
#include "Generators.pbcc"

// Uncomment the following define to enable debug execution
// #define DEBUG

// Computes a specified number of reference V-cycles
//
// Performance note: Y can point to the same matrix region as X
transform Helmholtz3DRefFMG
from IN[n,n,n], A[n,n,n], B0[n+1,n,n], B1[n,n+1,n], B2[n,n,n+1],
     RHS[n,n,n], ALPHA, BETA, DX, NUMITERS
to OUT[n,n,n]
through Z[n/2, n/2, n/2]
generator Helmholtz3DRefMGGenerator
{
    Z.cell(i,j,k) from () {
        return 0;
    }

    // solve recursively on coarser grids, with zero initial guess
    // then map the coarse solution back to the fine grid by interpolation
    to (OUT out) from (IN in, A a, B0 b0, B1 b1, B2 b2, RHS rhs,
                       ALPHA alpha, BETA beta, DX dx, NUMITERS numIters, Z z)
    {
        JASSERT(n >= 1)(n).Text("input must be >= 1");
        JASSERT(floor(log2(n)) == log2(n))(n).Text("input must be 2^k");
        JASSERT(numIters >= 0)(numIters).Text("num iterations must be non-negative");

        if (numIters == 0) {
          Copy3D(out, in);
          return;
        }

        if (n == 1) {

#ifdef DEBUG
            printf("base case called for n = 1\n");
#endif

            Helmholtz3DDirect(out, a, b0, b1, b2, rhs, alpha, beta, dx);

        } else {

#ifdef DEBUG
            printf("recursive case called for n = %d\n", n);
#endif

            // allocate temporary storage
            MatrixRegion3D t2 = MatrixRegion3D::allocate(n, n, n);
            MatrixRegion3D r1 = MatrixRegion3D::allocate(n/2, n/2, n/2);
            MatrixRegion3D r2 = MatrixRegion3D::allocate(n/2, n/2, n/2);

            // allocate restricted coefficient arrays
            MatrixRegion3D  aR = MatrixRegion3D::allocate(n/2  , n/2  , n/2  );
            MatrixRegion3D b0R = MatrixRegion3D::allocate(n/2+1, n/2  , n/2  );
            MatrixRegion3D b1R = MatrixRegion3D::allocate(n/2  , n/2+1, n/2  );
            MatrixRegion3D b2R = MatrixRegion3D::allocate(n/2  , n/2  , n/2+1);

            // compute restricted coefficient arrays
            Restrict3D(aR, a);
            Restrict3DB0(b0R, b0);
            Restrict3DB1(b1R, b1);
            Restrict3DB2(b2R, b2);

            // t2 gets new residual
            Helmholtz3DResidual(t2, in, a, b0, b1, b2, rhs, alpha, beta, dx);
            // r1 gets restricted residual
            Restrict3D(r1, t2);
            // r2 gets coarse update
            Helmholtz3DRefFMG(r2, z, aR, b0R, b1R, b2R, r1, alpha, beta, 2 * dx, 1);
            // t2 gets interpolated update
            Interpolate3D(t2, r2);
            // t2 gets updated guess
            Add3D(out, t2, in);

            if (numIters > 0) {
                Helmholtz3DRefMG(out, out, a, b0, b1, b2, rhs, alpha, beta, dx, numIters);
            }
        }
    }
}

#endif // HELMHOLTZ3DREFFMG_PBCC
