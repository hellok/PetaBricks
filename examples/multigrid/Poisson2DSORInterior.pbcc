#ifndef POISSON2DSORINTERIOR_PBCC
#define POISSON2DSORINTERIOR_PBCC

#include "../simple/copy.pbcc"

transform SplitRB
from IN[n,n]
to R[n+2,(n+4)/2], K[n+2,(n+4)/2]
{
  priority(0) R.cell(i,j) from (IN.cell(i - 1, 2 * j - 2) in1,
                                IN.cell(i - 1, 2 * j - 1) in2)
  {
    return (i % 2 == 1) ? in1 : in2;
  }
  priority(1) R.cell(i,j) from (IN.cell(i - 1, 2 * j - 2) in1)
  {
    return (i % 2 == 1) ? in1 : 0;
  }
  priority(1) R.cell(i,j) from (IN.cell(i - 1, 2 * j - 1) in2)
  {
    return (i % 2 == 1) ? 0 : in2;
  }
  priority(2) R.cell(i,j) from () { return 0; }

  priority(0) K.cell(i,j) from (IN.cell(i - 1, 2 * j - 1) in1,
                                IN.cell(i - 1, 2 * j) in2)
  {
    return (i % 2 == 1) ? in1 : in2;
  }
  priority(1) K.cell(i,j) from (IN.cell(i - 1, 2 * j - 1) in1)
  {
    return (i % 2 == 1) ? in1 : 0;
  }
  priority(1) K.cell(i,j) from (IN.cell(i - 1, 2 * j) in2)
  {
    return (i % 2 == 1) ? 0 : in2;
  }
  priority(2) K.cell(i,j) from () { return 0; }
}

transform Iterate
from RIn[width,height], KIn[width,height], RB[width,height], KB[width,height], _weight
to ROut[width,height], KOut[width,height]
{

  priority(0) ROut.cell(i,j) from (RIn.cell(i,j) me,
                                   KIn.cell(i,j) c,
                                   KIn.cell(i-1,j) w,
                                   KIn.cell(i+1,j) e,
                                   KIn.cell(i,j-1) no,
                                   KIn.cell(i-1,j-1) nw,
                                   KIn.cell(i+1,j-1) ne,
                                   RB.cell(i,j) b,
                                   _weight weight)
  {
    int n = width - 2;
    if ((i % 2 == 1 && 2 * j - 2 >= 0 && 2 * j - 2 < n) ||
        (i % 2 == 0 && 2 * j - 1 >= 0 && 2 * j - 1 < n)) {
      return (1 - weight) * me + weight * (c + (i % 2 == 0 ? w + e : nw + ne) + no + b) / 4;
    } else {
      return 0;
    }
  }
  
  priority(0) KOut.cell(i,j) from (KIn.cell(i,j) me,
                                   ROut.cell(i,j) c,
                                   ROut.cell(i-1,j) w,
                                   ROut.cell(i+1,j) e,
                                   ROut.cell(i,j+1) s,
                                   ROut.cell(i-1,j+1) sw,
                                   ROut.cell(i+1,j+1) se,
                                   KB.cell(i,j) b,
                                   _weight weight)
  {
    int n = width - 2;
    if ((i % 2 == 1 && 2 * j - 1 >= 0 && 2 * j - 1 < n) || 
        (i % 2 == 0 && 2 * j     >= 0 && 2 * j     < n)) {
      return (1 - weight) * me + weight * (c + (i % 2 == 1 ? w + e : sw + se) + s + b) / 4;
    } else {
      return 0;
    }
  }
  
  priority(1) ROut.cell(i,j) from () { return 0; }
  priority(1) KOut.cell(i,j) from () { return 0; }

}

transform Compute
from RIn[width,height], KIn[width,height], 
     RB [width,height], KB [width,height], 
     weight, numIterations
to ROut[width,height], KOut[width,height]
{
  to (ROut rOut, KOut kOut) from (RIn rIn, KIn kIn, RB rB, KB kB, weight w, numIterations num)
  {
    if (num > 0) {
      Iterate(rOut, kOut, rIn, kIn, rB, kB, w);
      if (num > 1) {
        Compute(rOut, kOut, rOut, kOut, rB, kB, w, num - 1);
      }
    } else {
      spawn Copy2D(rOut, rIn);
      spawn Copy2D(kOut, kIn);
      sync;
    }
  }
}

/* Specify a weight of -1 as sentinel for optimal SOR weight for iterative SOR for Poisson equation */
/* Specify a weight of -2 as sentinel for "optimal" SOR weight for multigrid step for Poisson equation */
// performance note: OUT can point to the same matrix region as IN
transform Poisson2DSORInterior
from IN[n,n], B[n,n], weight, numIterations
through RIn [n+2,(n+4)/2], KIn [n+2,(n+4)/2], 
        ROut[n+2,(n+4)/2], KOut[n+2,(n+4)/2], 
        RB  [n+2,(n+4)/2], KB  [n+2,(n+4)/2]
to OUT[n,n]
{

  // INITIALIZE
  to (RIn rIn, KIn kIn, RB rB, KB kB) from (IN in, B b)
  {
    spawn SplitRB(rIn, kIn, in);
    spawn SplitRB(rB, kB, b);
  }

  // COMPUTE
  to (ROut rOut, KOut kOut) from (RIn rIn, KIn kIn, RB rB, KB kB, weight _w, numIterations num)
  {
    double w;
    if (_w == -1) {
      w = 2 / (1 + sin((double) M_PI / (n + 1))); // use optimal SOR weight for Poisson
    } else if (_w == -2) {
      w = 1.15; // this constant was chosen by use of experiments and eyeballing
    } else {
      w = _w;
    }
    Compute(rOut, kOut, rIn, kIn, rB, kB, w, num);
  }

  // FINALIZE
  OUT.cell(i,j) from (ROut.cell(i + 1, (j + 2) / 2) r1,
                      KOut.cell(i + 1, (j + 1) / 2) k1,
                      ROut.cell(i + 1, (j + 1) / 2) r2,
                      KOut.cell(i + 1, j / 2) k2) {
    if (i % 2 == 0) {
      return (j % 2 == 0) ? r1 : k1;
    } else {
      return (j % 2 == 0) ? k2 : r2;
    }
  }

}

#endif // POISSON2DSORINTERIOR_PBCC

