#ifndef HELMHOLTZ3DFORWARDFUNC_PBCC
#define HELMHOLTZ3DFORWARDFUNC_PBCC

transform Helmholtz3DForwardFunc
from IN[n,n,n], A[n,n,n], B0[n+1,n,n], B1[n,n+1,n], B2[n,n,n+1],
     ALPHA, BETA, DX
to OUT[n,n,n]
{
  // interior point
  OUT.cell(i,j,k) from ( IN.cell(i  ,j  ,k  ) me,
                         IN.cell(i-1,j  ,k  ) we,
                         IN.cell(i+1,j  ,k  ) ea,
                         IN.cell(i  ,j-1,k  ) no,
                         IN.cell(i  ,j+1,k  ) so,
                         IN.cell(i  ,j  ,k-1) fr,
                         IN.cell(i  ,j  ,k+1) ba,
                          A.cell(i  ,j  ,k  ) a,
                         B0.cell(i  ,j  ,k  ) bwe,
                         B0.cell(i+1,j  ,k  ) bea,
                         B1.cell(i  ,j  ,k  ) bno,
                         B1.cell(i  ,j+1,k  ) bso,
                         B2.cell(i  ,j  ,k  ) bfr,
                         B2.cell(i  ,j  ,k+1) bba,
                         ALPHA alpha, BETA beta, DX dx)
  {
    double dxSq = dx * dx;
    double K = alpha * a + beta / dxSq * (bwe + bea + bno + bso + bfr + bba);
    return K * me - (beta / dxSq * (bwe * we + bea * ea + bno * no +
                                    bso * so + bfr * fr + bba * ba));
  }

  // boundary point
  secondary
  OUT.cell(i,j,k) from ( IN.cell(i  ,j  ,k  ) me,
                         IN.cell(i-1,j  ,k  ) r_we = OPTIONAL,
                         IN.cell(i+1,j  ,k  ) r_ea = OPTIONAL,
                         IN.cell(i  ,j-1,k  ) r_no = OPTIONAL,
                         IN.cell(i  ,j+1,k  ) r_so = OPTIONAL,
                         IN.cell(i  ,j  ,k-1) r_fr = OPTIONAL,
                         IN.cell(i  ,j  ,k+1) r_ba = OPTIONAL,
                          A.cell(i  ,j  ,k  ) a,
                         B0.cell(i  ,j  ,k  ) bwe,
                         B0.cell(i+1,j  ,k  ) bea,
                         B1.cell(i  ,j  ,k  ) bno,
                         B1.cell(i  ,j+1,k  ) bso,
                         B2.cell(i  ,j  ,k  ) bfr,
                         B2.cell(i  ,j  ,k+1) bba,
                         ALPHA alpha, BETA beta, DX dx)
  {
    double we, ea, no, so, fr, ba;

    we = (IS_MISSING(r_we) ? -me : r_we);
    ea = (IS_MISSING(r_ea) ? -me : r_ea);
    no = (IS_MISSING(r_no) ? -me : r_no);
    so = (IS_MISSING(r_so) ? -me : r_so);
    fr = (IS_MISSING(r_fr) ? -me : r_fr);
    ba = (IS_MISSING(r_ba) ? -me : r_ba);

    double dxSq = dx * dx;
    double K = alpha * a + beta / dxSq * (bwe + bea + bno + bso + bfr + bba);
    return K * me - (beta / dxSq * (bwe * we + bea * ea + bno * no +
                                    bso * so + bfr * fr + bba * ba));
  }
}

#endif // HELMHOLTZ3DFORWARDFUNC_PBCC
